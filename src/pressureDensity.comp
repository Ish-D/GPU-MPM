#version 430 core

layout(local_size_x = GROUP_SIZE) in;

layout(std140, binding = 0) uniform ComputeParameters {
    uint size;
    float ifps;
    float radius;
    uint grid_size;
    float grid_scale;
    uint ranges_offset;
};

layout(std430, binding = 1) readonly buffer GridBuffer { uint grid_buffer[]; };
layout(std430, binding = 2) readonly buffer SrcPositionBuffer { vec4 src_position_buffer[]; };
layout(std430, binding = 3) readonly buffer SrcVelocityBuffer { vec4 src_velocity_buffer[]; };
layout(std430, binding = 4) writeonly buffer pressureBuffer { float pressure_buffer[]; };
layout(std430, binding = 5) writeonly buffer densityBuffer { float density_buffer[]; };
layout(std430, binding = 6) readonly buffer massBuffer {float mass_buffer[];};


uvec3 get_index(vec3 position, float grid_scale, float offset) {
    return uvec3(floor(position * grid_scale + 1024.0f + offset));
}

uint get_hash(uvec3 index, uint grid_size) {
    return grid_size * (grid_size * index.z + index.y) + index.x;
}

#define STIFFNESS 10.f
#define RESTING_DENSITY 1.f
#define SMOOTHING_LEN 1
#define PI  3.1415927410125732421875f

void main() {
    uint global_id = gl_GlobalInvocationID.x;
    if(global_id >= size) return;

    vec3 position = src_position_buffer[global_id].xyz;
    float density = 0.0f;

    uvec3 index = get_index(position, grid_scale, 0.0f);
    for(uint z = 0u; z < 2u; z++) {
        uint Z = (index.z + z) & (grid_size - 1u);
        for(uint y = 0u; y < 2u; y++) {
            uint Y = (index.y + y) & (grid_size - 1u);
            for(uint x = 0u; x < 2u; x++) {
                uint X = (index.x + x) & (grid_size - 1u);
                uint range_index = ranges_offset + get_hash(uvec3(X, Y, Z), grid_size) * 2u;
                uint range_begin = grid_buffer[range_index + 0u];
                uint range_end = grid_buffer[range_index + 1u];
                for(uint i = range_begin; i < range_end; i++) {
                    uint index = grid_buffer[i];
                    // calculate density and pressure
                    vec3 position_1 = src_position_buffer[index].xyz;
                    vec3 delta = position - position_1;
                    float r = length(delta);
                    float r2 = dot(delta, delta);

                    [[branch]] if (r < SMOOTHING_LEN) {
                        density += mass_buffer[index] * (315.0f/(64.0f * PI * pow(SMOOTHING_LEN, 9))) * pow(SMOOTHING_LEN*SMOOTHING_LEN - r2,3);
                    }
                }
            }
        }
    }

    density_buffer[global_id] = max(density, RESTING_DENSITY);
    pressure_buffer[global_id] = STIFFNESS * (density - RESTING_DENSITY);
}
